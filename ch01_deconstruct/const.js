// const 实际上保证的，并不是变量的值不得改动，而是变量指向的那个内存地址 不得改动。对于简单类型的数据（ 数值、字符串、布尔值） ，值就保存在变量指向
// 的那个内存地址，因此等同于常量。但对于复合类型的数据（ 主要是对象和数 组） ，变量指向的内存地址，保存的只是一个指针， const 只能保证这个指针是
// 固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。因此，将一个 对象声明为常量必须非常小心。

const foo = {};
// 为 foo 添加一个属性，可以成功
foo.prop = 123;
foo.prop // 123
// 将 foo 指向另一个对象，就会报错
// foo = {}; // TypeError: "foo" is read-only

// 上面代码中，常量 foo 储存的是一个地址，这个地址指向一个对象。不可变的只 是这个地址，即不能把 foo 指向另一个地址，但对象本身是可变的，所以依然可
// 以为其添加新属性

const a = [];
a.push('Hello'); // 可执行
a.length = 0; // 可执行
a = ['Dave']; // 报错
// 上面代码中，常量 a 是一个数组，这个数组本身是可写的，但是如果将另一个数 组赋值给 a ，就会报错 如果真的想将对象冻结，应该使用
// Object.freeze 方法。
const bar = Object.freeze({});
// 常规模式时，下面一行不起作用； 严格模式时，该行会报错
bar.prop = 123;

// 除了将对象本身冻结，对象的属性也应该冻结。下面是一个将对象彻底冻结的函数

var constantize = (obj) => {
    Object.freeze(obj);
    Object
        .keys(obj)
        .forEach((key, i) => {
            if (typeof obj[key] === 'object') {
                constantize(obj[key]);
            }
        });
};
